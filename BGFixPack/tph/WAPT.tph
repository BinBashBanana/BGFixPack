//////////////////////////////////////////////

// Note by Ardanis:
// As you can tell by the prefix, it originally was a Qwinn's macro. I compressed it
// into a more accessible format. A fair example of how to make a good use of arrays.

// Bigg, Weidu's readme says it needs a real example of array usage. Does this pass for one?

DEFINE_PATCH_MACRO ~wapt_Q_ARE_InitVars~ BEGIN

PATCH_IF (GAME_IS ~pst~)                     BEGIN Q_Game=1 END
PATCH_IF (GAME_IS ~bg2 tob tutu tutu_totsc~) BEGIN Q_Game=2 END
PATCH_IF (GAME_IS ~bg1 totsc iwd how~)       BEGIN Q_Game=3 END

DEFINE_ARRAY object BEGIN Actor Trigg Spawn Entra Conta Items Ambie Varia Doors Tiled Vertx Explo Anima Songs RestS MapNo ProTr END
DEFINE_ARRAY Siz    BEGIN 0x110 0xc4  0xc8  0x68  0xc0  0x14  0xd4  0x54  0xc8  0x6c  0x4   0x0   0x4c  0x90  0xe4  0x34  0x1A  END
DEFINE_ARRAY OoN    BEGIN 0x58  0x5a  0x64  0x6c  0x74  0x76  0x82  0x8c  0xa4  0xb4  0x80  0x0   0xac  0x0   0x0   0xc8  0xd0  END
DEFINE_ARRAY OoO    BEGIN 0x54  0x5c  0x60  0x68  0x70  0x78  0x84  0x88  0xa8  0xb8  0x7c  0xa0  0xb0  0xbc  0xc0  0xc4  0xcc  END
DEFINE_ARRAY SoL    BEGIN 2     2     4     4     2     2     2     4     4     4     2     0     4     0     0     4     4     END

FOR (i=0;i<17;i+=1) BEGIN
  SET $Q_Siz($object("%i%"))=$Siz("%i%")     // size of object's section
  SET $Q_OoN($object("%i%"))=$OoN("%i%")     // offset of number of objects
  SET $Q_OoO($object("%i%"))=$OoO("%i%")     // offset of offset of objects
  SET $Q_SoL($object("%i%"))=$SoL("%i%")     // SHORT or LONG offset of number of objects
  PATCH_IF i=15 & Q_Game=1 BEGIN                                 // PST uses different values
    Q_OoN_MapNo=0xcc Q_OoO_MapNo=0xc8 END
  PATCH_IF $SoL("%i%")=2 BEGIN               // number of objects
    READ_SHORT $Q_OoN($object("%i%")) $Q_Num($object("%i%")) END // if SoL = 2 = SHORT, then READ_SHORT
  PATCH_IF $SoL("%i%")=4 & ( i!=16 | Q_Game=2) BEGIN             // non-BG2 games can't have projectiles
    READ_LONG  $Q_OoN($object("%i%")) $Q_Num($object("%i%")) END // if SoL = 4 = LONG, then READ_LONG
  PATCH_IF $SoL("%i%")=0 BEGIN                                   // if SoL = 0 = not needed, don't READ, instead
    SET $Q_Num($object("%i%"))=1 END                             //   SET it to 1, as this can't be any other
  PATCH_IF i!=16 | Q_Game=2 BEGIN            // offset of objects
    READ_LONG  $Q_OoO($object("%i%")) $Q_Off($object("%i%")) END // offsets' READs always LONG
END

PATCH_IF Q_Game!=2 BEGIN                                         // if it's non-BG2 then set everything
  Q_OoN_ProTr=0 Q_OoO_ProTr=0 Q_Num_ProTr=0 Q_Off_ProTr=0 END    // related to projectiles to zero

END

/////////////////////////////////////////////////

// Note by Ardanis:
// Again, Qwinn's stuff that was revamped.

DEFINE_PATCH_MACRO ~wapt_Q_AREAdd_InitVars~ BEGIN
FOR (i=0;i<17;i+=1) BEGIN
  SET $Q_New($object("%i%"))=0        // number of new objects
  SET $Q_NewOffset($object("%i%"))=0  // writing offset for new objects
END
Q_ManualInsert=0  // unnecessary, but may be required for RESHAPE_AREA_POLYGON, should it be added later (unlikely)
END

//////////////////////////////////////////

// Note by Ardanis:
// Unlike the other two Qwinn's macros, this one is almost untouched, except of adding the 'wapt_' prefix to
// it's name and correcting the name of the macro LAUNCHed at the very end, which now has that prefix as well

DEFINE_PATCH_MACRO ~wapt_Q_AREAdd_Process~
BEGIN

// DO NOT use this macro without first running Q_AREAdd_InitVars.
// Documentation for the use of this macro is contained within that macro definition.

PATCH_FOR_EACH "S1" IN
  ~Actor~ ~Trigg~ ~Spawn~ ~Entra~ ~Conta~ ~Items~ ~Ambie~ ~Varia~ ~Doors~
  ~Tiled~ ~Vertx~ ~Anima~ ~MapNo~ ~ProTr~
BEGIN
  SET "Q_NewSect" = $Q_New("%S1%") // How many new sections user has asked for
  PATCH_IF !("Q_NewSect" = 0) THEN
  BEGIN
	// WRITE_ASCII 0x33c ~%S1%~ #32 // DEBUG
	SET "Q_OoNSect" = $Q_OoN("%S1%") // Offset where count of each section is stored
	SET "Q_NumSect" = $Q_Num("%S1%") // Original count for that section
	SET "Q_SoLSect" = $Q_SoL("%S1%")  // Whether original count is stored as long or short
	SET "Q_OoOSect1" = $Q_OoO("%S1%") // Offset of offset for the section
	SET "Q_Offset1" = $Q_Off("%S1%") // Offset of the section being added to
	SET "Q_SizSect" = $Q_Siz("%S1%") // The size of one new section
	PATCH_FOR_EACH "S2" IN
	  ~Actor~ ~Trigg~ ~Spawn~ ~Entra~ ~Conta~ ~Items~ ~Ambie~ ~Varia~ ~Doors~
	  ~Tiled~ ~Vertx~ ~Explo~ ~Anima~ ~Songs~ ~RestS~ ~MapNo~ ~ProTr~
	BEGIN
	  // WRITE_ASCII 0x33c ~%S1% %S2%~ #32 // DEBUG
	  SET "Q_Offset2" = $Q_Off("%S2%") // Offset of each other section
	  SET "Q_OoOSect2" = $Q_OoO("%S2%") // Offset of that offset
	  SET "Q_OldInsert" = $Q_NewOffset("%S2%") // Previous insert offsets need to be updated too

	  PATCH_IF ("Q_Offset2" >= "Q_Offset1") AND NOT ("%S1%" STRING_EQUAL "%S2%") THEN
	  BEGIN
		WRITE_LONG "Q_OoOSect2" ("Q_Offset2" + ("Q_NewSect" * "Q_SizSect"))
	  END
	  PATCH_IF ("Q_OldInsert" >= "Q_Offset1") AND NOT ("%S1%" STRING_EQUAL "%S2%") THEN
	  BEGIN
		SET $Q_NewOffset("%S2%") = $Q_NewOffset("%S2%") + ("Q_NewSect" * "Q_SizSect")
	  END
	END
	SET $Q_NewOffset("%S1%") = "Q_Offset1" + ("Q_NumSect" * "Q_SizSect")
	SET "Q_InsertOffset" = $Q_NewOffset("%S1%")
	PATCH_IF "Q_ManualInsert" = 0 THEN
	BEGIN
	  INSERT_BYTES "Q_InsertOffset" ("Q_NewSect" * "Q_SizSect")
	END
        PATCH_IF "Q_SoLSect" = 2 THEN BEGIN WRITE_SHORT "Q_OoNSect" ("Q_NumSect" + "Q_NewSect") END
                                 ELSE BEGIN WRITE_LONG  "Q_OoNSect" ("Q_NumSect" + "Q_NewSect") END
	LAUNCH_PATCH_MACRO ~wapt_Q_ARE_InitVars~  // Reset all our variables to their new values
  END
END

END

////////////////////////////////////////////////////
//////////////////////////////////////

// This macro does the following:
//   sets 'bbox' to 1, which is the starting value for all ADD_AREA_STUFF functions
//   calculates the total amount of new vertices
//   inserts new objects using Qwinn's algorithm
//   writes new vertices
//   sets 'vert_entry' - the starting index of newly added vertices

DEFINE_PATCH_MACRO wapt_inserter BEGIN
  bbox=1 // vertex index for bounding box calculation
  vert=0                               //calculating the number of new
  FOR (i=1;i<wapt_object+1;i+=1) BEGIN //vertices, to save modder the
    vert+= $wapt_vertices("%i%")       //trouble of doing it manually
  END
  LAUNCH_PATCH_MACRO ~wapt_Q_ARE_InitVars~    //launch variable initiation macro
  LAUNCH_PATCH_MACRO ~wapt_Q_AREAdd_InitVars~ //launch variable initiation macro for adding new sections
  Q_New_Vertx = vert
  PATCH_FOR_EACH ob_type IN ~Conta~ ~Entra~ ~Trigg~ BEGIN         //which type of object we're adding
    PATCH_IF ~%wapt_ob_type%~ STRING_EQUAL_CASE ~%ob_type%~ BEGIN //wapt_ob_type is preset by STR_VAR
      SET $Q_New("%ob_type%") = wapt_object
    END ELSE BEGIN
      SET $Q_New("%ob_type%") = 0
    END
    PATCH_IF (~%ob_type%~ STRING_EQUAL_CASE ~Conta~) AND (VARIABLE_IS_SET wapt_num_new_Items ) BEGIN  //if user is adding items to new containers
     Q_New_Items = %wapt_item%                                                                        //update variable to get proper space installed
     wapt_idx_items = %Q_Num_Items%                                                                   //assign index value for item(s) in first container
    END
  END
  LAUNCH_PATCH_MACRO ~wapt_Q_AREAdd_Process~  //launch macro that adds new space for above listed entries
  vert_entry = Q_Num_Vertx - Q_New_Vertx      //starting index for new vertices, used by the main FUNCTION
  FOR (i=1;i<vert+1;i+=1) BEGIN                             //
    WRITE_SHORT (Q_NewOffset_Vertx+i*4 - 4) $wapt_vx("%i%") //writing new vertices
    WRITE_SHORT (Q_NewOffset_Vertx+i*4 - 2) $wapt_vy("%i%") //
  END
END

/////////////////////////////////////

// This macro does the following:
//   sets 'new_loc' - the starting offset for writing down the new object
//   writes the object's name, which is 32 char long
//   calculates and writes the bounding box for the object

DEFINE_PATCH_MACRO wapt_routine BEGIN // vars used for bbox math: a b c c1 c2 bbox_off
  new_loc = $Q_NewOffset("%wapt_ob_type%") + (i - 1)*$Q_Siz("%wapt_ob_type%") // from where we'll do writing
  WRITE_EVALUATED_ASCII new_loc $wapt_object_name("%i%") (32)                 // object's name
  bbox_off=new_loc+wapt_bbox                                 //offset for this object's bbox, wapt_bbox is preset by INT_VAR
  FOR (a=0;a<4;a+=1) BEGIN                                   //0=X_low - left, 1=Y_low - down, 2=X_high - right, 3=Y_high - top
    PATCH_IF a=0 OR a=2 BEGIN SPRINT xy ~wapt_vx_~ END ELSE BEGIN SPRINT xy ~wapt_vy_~ END //X or Y coordinate of the vertex
    c=bbox                                                   //we assume that the extreme vertex is the 1st one of the object
    c1=EVALUATE_BUFFER ~%%xy%%c%%~                           //coord_value_1=(X/Y)_%vert_index%, coord of object's the 1st vertex
    FOR (b=bbox+1;b<$wapt_vertices("%i%")+bbox;b+=1) BEGIN   //start with 2nd vertex of the object, finish with the last
      c2=EVALUATE_BUFFER ~%%xy%%b%%~                         //coord_value_2=(X/Y)_%counter%, other vertices of the object
      PATCH_IF (a<2&c2<c1)|(a>1&c2>c1) BEGIN //compare the 1st vertex's value with that of the others, if some exceeds then...
        c=b                                  //...mark it as the new extreme and...
        c1=c2                                //...use it's value to check against the remaining
      END
      WRITE_SHORT (bbox_off+a*2) EVALUATE_BUFFER ~%%xy%%c%%~ //precisely the box's values for the object, writing that down
    END
  END
  bbox+=$wapt_vertices("%i%") // update the bbox index so it matches the 1st vertex of the next object
END // should ADD_DOOR (it has 3 polygons instead of 1) be introduced, this macro will have to be revamped

////////////////////////////////////////////////////
DEFINE_ACTION_FUNCTION wapt_add_container
  INT_VAR
    wapt_object=1
    wapt_item=0
    wapt_bbox=0x38
  STR_VAR
    wapt_ob_type= ~Conta~
  BEGIN
COPY_EXISTING ~%wapt_area%.are~ ~override~
  PATCH_IF (VARIABLE_IS_SET wapt_num_new_Conta) BEGIN   //if user choose to add more than one container -- uses a more user friendly variable name
   wapt_object = %wapt_num_new_Conta%
  END
  PATCH_IF (VARIABLE_IS_SET wapt_num_new_Items) BEGIN   //if user choose to add one or more items to a container -- uses a more user friendly variable name
   wapt_item = %wapt_num_new_Items%
  END
  LAUNCH_PATCH_MACRO wapt_inserter
  FOR (i=1;i<wapt_object+1;i+=1) BEGIN
    LAUNCH_PATCH_MACRO wapt_routine
DEFINE_ARRAY field BEGIN use_point_x use_point_y type lock_diff flags trap_detect_diff trap_disarm_diff trap_trapped trap_detected trap_launch_x trap_launch_y script key_item string vertices END
DEFINE_ARRAY Off   BEGIN 0x20        0x22        0x24 0x26      0x28  0x2c             0x2e             0x30         0x32          0x34          0x36          0x48   0x78     0x84   0x54     END
DEFINE_ARRAY SoL   BEGIN 2           2           2    2         4     2                2                2            2             2             2             8      8        4      4        END
    FOR(i2=0;i2<15;i2+=1)BEGIN
     PATCH_IF ($SoL("%i2%")=2) AND (VARIABLE_IS_SET $wapt($field("%i2%")"%i%") ) BEGIN
      WRITE_SHORT (%new_loc%+ $Off("%i2%")) $wapt($field("%i2%")"%i%")
     END
     PATCH_IF ($SoL("%i2%")=4) AND (VARIABLE_IS_SET $wapt($field("%i2%")"%i%") ) BEGIN
      WRITE_LONG (%new_loc%+ $Off("%i2%")) $wapt($field("%i2%")"%i%")
     END
     PATCH_IF ($SoL("%i2%")=8) AND (VARIABLE_IS_SET $wapt($field("%i2%")"%i%") ) BEGIN
      WRITE_ASCIIE (%new_loc%+ $Off("%i2%")) $wapt($field("%i2%")"%i%") (8)
     END
    END
    PATCH_IF (%wapt_item% >0) BEGIN
     WRITE_LONG (new_loc+0x40) %wapt_idx_items%                 // index value for first new item in current container
     WRITE_LONG (new_loc+0x44) $wapt_num_items("%i%")           // won't write for some reason within the array system
     wapt_idx_items += $wapt_num_items("%i%")                   // update item index for the next container
    END
    WRITE_LONG (new_loc + 0x50)  vert_entry                    // vertex index
    vert_entry += $wapt_vertices("%i%")                        // update vertex index for the next object
  END
DEFINE_ARRAY ifield BEGIN itm_name exp_time qc1 qc2 qc3 itm_flags END
DEFINE_ARRAY i_off  BEGIN 0x0      0x8      0xa 0xc 0xe 0x10      END
DEFINE_ARRAY i_sol  BEGIN 8        2        2   2   2   4         END
  FOR (i4=1;i4<%wapt_item%+1;i4+=1)BEGIN
    FOR(i3=0;i3<6;i3+=1)BEGIN
     PATCH_IF ($i_sol("%i3%")=8) AND (VARIABLE_IS_SET $wapt($ifield("%i3%")"%i4%") ) BEGIN
      WRITE_ASCIIE (%Q_NewOffset_Items% + (%Q_Siz_Items% * (%i4%-1))) $wapt($ifield("%i3%")"%i4%") (8)
     END
     PATCH_IF ($i_sol("%i3%")=4) AND (VARIABLE_IS_SET $wapt($ifield("%i3%")"%i4%") ) BEGIN
      WRITE_LONG (%Q_NewOffset_Items% + (%Q_Siz_Items% * (%i4%-1))) $wapt($ifield("%i3%")"%i4%")
     END
     PATCH_IF ($i_sol("%i3%")=2) AND (VARIABLE_IS_SET $wapt($ifield("%i3%")"%i4%") ) BEGIN
      WRITE_SHORT (%Q_NewOffset_Items% + (%Q_Siz_Items% * (%i4%-1))) $wapt($ifield("%i3%")"%i4%")
     END
    END
  END
BUT_ONLY_IF_IT_CHANGES
END

//////////////////////////////////////
DEFINE_PATCH_MACRO ~wapt_header_initvars~ BEGIN
 PATCH_IF (GAME_IS ~pst~)                     BEGIN Q_Game=1 END
 PATCH_IF (GAME_IS ~bg2 tob tutu tutu_totsc~) BEGIN Q_Game=2 END
 PATCH_IF (GAME_IS ~bg1 totsc iwd how~)       BEGIN Q_Game=3 END
 DEFINE_ARRAY Entry BEGIN Signa WedFi LSave AFlag North East South West AType RainP SnowP FogPr LiteP AreBS RMDay RMNit END
 DEFINE_ARRAY OoEnt BEGIN 0x0   0x8   0x10  0x14  0x18  0x24 0x30  0x3c 0x48  0x4a  0x4c  0x4e  0x50  0x94  0xd4  0xdc  END
 DEFINE_ARRAY SoEnt BEGIN 8     8     4     4     8     8    8     8    2     2     2     2     2     8     8     8     END
 FOR(i=0;i<16;i+=1)BEGIN
  PATCH_IF ($SoEnt("%i%")=8) BEGIN
   READ_ASCII $OoEnt("%i%") $wapt_h($Entry("%i%"))
  END
  PATCH_IF ($SoEnt("%i%")=4) BEGIN
   READ_LONG $OoEnt("%i%") $wapt_h($Entry("%i%"))
  END
  PATCH_IF ($SoEnt("%i%")=2) BEGIN
   READ_SHORT $OoEnt("%i%") $wapt_h($Entry("%i%"))
  END
 END
END